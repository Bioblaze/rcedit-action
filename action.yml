name: 'Set Resources on Files with rcedit'
description: 'Use rcedit to set resources on exe or dll files'
author: 'Bioblaze Payne(Randolph William Aarseth II)'
branding:
  color: blue
  icon: edit

inputs:
  directory-path:
    description: 'Path to the directory containing the files'
    required: true
  file-types:
    description: 'Types of the files to be processed (comma-separated, without dots)'
    required: true
    default: 'exe,dll'
  comment:
    description: 'Comment to set on the files'
    required: false
  set-icon:
    description: 'Whether to set the icon of a specific file'
    required: false
    default: 'false'
  exe-file-name:
    description: 'Name of the file whose icon should be set'
    required: false
  ico-file-path:
    description: 'Path to the icon file'
    required: false
  company-name:
    description: 'Company name to set on the files'
    required: false
  file-description:
    description: 'File description to set on the files'
    required: false
  file-version:
    description: 'File version to set on the files'
    required: false
  legal-copyright:
    description: 'Legal copyright to set on the files'
    required: false
  legal-trademarks:
    description: 'Legal trademarks to set on the files'
    required: false
  product-name:
    description: 'Product name to set on the files'
    required: false
  product-version:
    description: 'Product version to set on the files'
    required: false

runs:
  using: "composite"
  steps:

    - name: Install rcedit using Chocolatey
      run: choco install rcedit -y
      shell: pwsh

    - name: Set resources on files
      run: |
        $dir = "${{ inputs.directory-path }}"
        $fileTypes = "${{ inputs.file-types }}" -split ','
        if ($fileTypes.Count -eq 0) {
          throw "At least one file type must be provided."
        }

        $comment = "${{ inputs.comment }}"
        $flag = "${{ inputs.set-icon }}"
        $specificFile = "${{ inputs.exe-file-name }}"
        $icoFile = "${{ inputs.ico-file-path }}"
        $companyName = "${{ inputs.company-name }}"
        $fileDescription = "${{ inputs.file-description }}"
        $fileVersion = "${{ inputs.file-version }}"
        $legalCopyright = "${{ inputs.legal-copyright }}"
        $legalTrademarks = "${{ inputs.legal-trademarks }}"
        $productName = "${{ inputs.product-name }}"
        $productVersion = "${{ inputs.product-version }}"

        $targetFiles = Get-ChildItem -Path $dir -Recurse -File | Where-Object { $fileTypes -contains $_.Extension.Substring(1) }

        foreach ($file in $targetFiles) {
            $rceditArgs = @()

            if (![String]::IsNullOrEmpty($comment)) { $rceditArgs += "--set-version-string", "Comments", "$comment" }
            if (![String]::IsNullOrEmpty($companyName)) { $rceditArgs += "--set-version-string", "CompanyName", "$companyName" }
            if (![String]::IsNullOrEmpty($legalCopyright)) { $rceditArgs += "--set-version-string", "LegalCopyright", "$legalCopyright" }
            if (![String]::IsNullOrEmpty($legalTrademarks)) { $rceditArgs += "--set-version-string", "LegalTrademarks", "$legalTrademarks" }

            if ($file.Name -eq $specificFile) {
                if ($flag -eq "true") { $rceditArgs += "--set-icon", "$icoFile" }
                if (![String]::IsNullOrEmpty($fileDescription)) { $rceditArgs += "--set-version-string", "FileDescription", "$fileDescription" }
                if (![String]::IsNullOrEmpty($fileVersion)) { $rceditArgs += "--set-version-string", "FileVersion", "$fileVersion" }
                if (![String]::IsNullOrEmpty($productName)) { $rceditArgs += "--set-version-string", "ProductName", "$productName" }
                if (![String]::IsNullOrEmpty($productVersion)) { $rceditArgs += "--set-version-string", "ProductVersion", "$productVersion" }
            }

            & rcedit $file.FullName $rceditArgs
        }
      shell: pwsh

